#!%PERL%

# SOAP 1.1 / WSSE compliant interface for
# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright 2013-2022 Goethe-Institut e.V.
# Immo Goltz <immo.goltz@goethe.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# %SYMPA-USER%

use lib split(/:/, $ENV{SYMPALIB} || ''), '%SYMPA-MODULEDIR%';
use strict;
use warnings;
use English qw(-no_match_vars);

# Sympa API
use Conf;
use Sympa::DatabaseManager;
use Sympa::List;
use Sympa::Log;
use Sympa::Spool::Listmaster;
use Sympa::WWW::Tools;

# XML::Compile modules
use XML::Compile::WSDL11;
use XML::Compile::SOAP11;
use XML::Compile::SOAP::WSS;
use XML::Compile::WSS::Util    qw/:utp11/;
use XML::Compile::Util         qw/pack_type/;
use XML::Compile::SOAP::Daemon::CGI;
use CGI::Fast;

# SOAP11
use Sympa::WWW::SOAP11;
use Sympa::WWW::SOAP11::Error;


## Load sympa config
unless (Conf::load()) {
    printf STDERR
        "Unable to load sympa configuration, file %s or one of the vhost robot.conf files contain errors. Exiting\n",
        Conf::get_sympa_conf();
    exit 1;
}

# Open log
my $log = Sympa::Log->instance;
$log->{level} = $Conf::Conf{'log_level'};
$log->openlog(
    $Conf::Conf{'log_facility'} || $Conf::Conf{'syslog'},
    $Conf::Conf{'log_socket_type'},
    service => 'sympasoap11'
);
$log->syslog('info', 'SympaSOAP11 started');

## We set the real UID with the effective UID value
## It is useful to allow execution of scripts like alias_manager
## that otherwise might loose the benefit of SetUID
$UID = $EUID;    ## UID
$GID = $EGID;    ## GID

unless (Sympa::DatabaseManager->instance) {
    $log->syslog('err', 'SympaSOAP11 requires a RDBMS to run');
}

## The process should not fork for sending mail
## Messages will be spooled instead
Sympa::Spool::Listmaster->instance->{use_bulk} = 1;

## Loading all Lists at startup, in order to increase execution speed

my $all_lists = Sympa::List::get_lists('*');

##############################################################################
#    Soap part
##############################################################################

# XML::Compile::* uses Log::Report. The 'default' dispatcher for error
# messages is here changed from PERL (die/warn) into using Sympas log->syslog.
# We can't use SYSLOG dispatcher as Sys::Syslog only allows one syslog stream
use Log::Report 'sympasoap11', syntax => 'SHORT';

# mapping of Dispatcher::Syslog reasons to Sympa Log level
my %reasonToLevel = (
    TRACE   => 'debug3',
    ASSERT  => 'debug2',
    INFO    => 'info',
    NOTICE  => 'notice',
    WARNING => 'err',
    MISTAKE => 'err',
    ERROR   => 'err',
    FAULT   => 'err',
    ALERT   => 'err',
    FAILURE => 'err',
    PANIC   => 'err'
);

# callback routine for dispatcher
sub logger {
    my ($disp, $options, $reason, $message) = @_;
    my $level = $reasonToLevel{$reason};
    my $newMessage = $options->{location}[0] . ' ' . $message->toString;
    if ( defined $level ) {
        $log->syslog($level, $newMessage);
    } else {
        $log->syslog('err', "Not supported reason $reason, using INFO");
        $log->syslog('info', $newMessage);
    }
}
dispatcher CALLBACK => 'default', mode => $Conf::Conf{'log_level'}, callback => \&logger;

# Logging to STDERR
use Log::Report::Dispatcher::File;
dispatcher 'FILE' => 'stderr', to => \*STDERR, mode => $Conf::Conf{'log_level'};


# set up the daemon
# the fcgi deamon is instantiated once by sympasoap11.fcgi
# then ->runCgiRequest is called for every query

# WSS
my $wss = XML::Compile::SOAP::WSS->new;

# WSDL
my $wsdl = XML::Compile::WSDL11->new(Sympa::Constants::MODULEDIR . "/Sympa/WWW/SOAP11/sympasoap11.wsdl");
$wsdl->importDefinitions(Sympa::Constants::MODULEDIR . "/Sympa/WWW/SOAP11/sympasoap11.xsd");

# The error namespace used is not defined in the
# wsdl neither the xsd, so have to add it explicitly.
$wsdl->prefixes(err => Sympa::WWW::SOAP11::Error::ERROR_NS);

# enforce the error name-space declaration to be available in all
# returned messages: at compile-time, it is not known that it may
# be used... but XML::Compile handles namespaces statically.
$wsdl->prefixFor(Sympa::WWW::SOAP11::Error::ERROR_NS);

# daemon connects itself to a WSDL
our $daemon = XML::Compile::SOAP::Daemon::CGI->new;

# GET request to ?WSDL returns wsdl file
$daemon->setWsdlResponse(Sympa::Constants::MODULEDIR . "/Sympa/WWW/SOAP11/sympasoap11.wsdl");

# With WSDL, most of the infrastructure is auto-generated.
# The only thing to do, is provide call-back code references
# for each of the portNames in the WSDL.
my %callbacks = ( 
    getVersion               => \&Sympa::WWW::SOAP11::getVersion,
    getRobots                => \&Sympa::WWW::SOAP11::getRobots,
    getListTemplates         => \&Sympa::WWW::SOAP11::getListTemplates,  
    getLists                 => \&Sympa::WWW::SOAP11::getLists,
    getList                  => \&Sympa::WWW::SOAP11::getList,
    createList               => \&Sympa::WWW::SOAP11::createList,
    getSubscribers           => \&Sympa::WWW::SOAP11::getSubscribers,
    addSubscribers           => \&Sympa::WWW::SOAP11::addSubscribers,
    subscribeSubscribers     => \&Sympa::WWW::SOAP11::subscribeSubscribers,
    delSubscribers           => \&Sympa::WWW::SOAP11::delSubscribers,
    unsubscribeSubscribers   => \&Sympa::WWW::SOAP11::unsubscribeSubscribers,
    getSubscriptions         => \&Sympa::WWW::SOAP11::getSubscriptions,
    getAdmins                => \&Sympa::WWW::SOAP11::getAdmins,
    addAdmins                => \&Sympa::WWW::SOAP11::addAdmins,
    delAdmins                => \&Sympa::WWW::SOAP11::delAdmins,
    changeEmail              => \&Sympa::WWW::SOAP11::changeEmail,
    closeList                => \&Sympa::WWW::SOAP11::closeList,
    deleteList               => \&Sympa::WWW::SOAP11::deleteList,
);

$daemon->operationsFromWSDL (
    $wsdl, 
    callbacks => \%callbacks
);

# loop forever and handle requests
while ( my $query = new CGI::Fast ) {
    # from SOAP::Transport.pm
    # Select appropriate robot.
    $ENV{SYMPA_DOMAIN} = Sympa::WWW::Tools::get_robot('soap_url_local', 'soap_url');
    $log->syslog('debug3', 'sympasoap11 for SYMPA_DOMAIN: %s', $ENV{SYMPA_DOMAIN});

    $daemon->runCgiRequest( query => $query, nph => 0 );
}
